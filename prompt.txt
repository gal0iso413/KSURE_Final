## **Final Revised Plan: XGBoost Risk Prediction Model Development**

### **Phase 1: Foundation & Understanding** ‚úÖ *COMPLETED*

**Step 1: Simple Baseline Model** ‚úÖ
- Load data from 1_Dataset.py output
- Basic data exploration (shape, missing values, target distribution)
- Create simplest possible XGBoost model with default parameters
- Use simple train/test split (80/20) without considering dates
- *Goal: Establish working pipeline and baseline performance*

**Step 2: Basic Evaluation Framework** ‚úÖ
- Implement proper multi-class evaluation metrics
- Create confusion matrix visualization
- Document baseline performance for comparison
- *Goal: Understand current model performance*

**Step 3: Comprehensive Exploratory Data Analysis (EDA)** ‚úÖ
- **Data Quality Analysis**: Missing patterns, outliers, data types
- **Temporal Patterns**: Distribution changes over time, seasonality
- **Target Variable Analysis**: Class distribution over time, business cycles impact
- **Feature Relationships**: Correlation analysis, feature distributions by target class
- **Business Logic Validation**: Do the data patterns make business sense?
- **Data Leakage Investigation**: Identify potentially problematic features
- *Goal: Deep understanding of data characteristics to inform all subsequent decisions*

### **Phase 2: Data Strategy** ‚úÖ *COMPLETED*

**Step 4: Temporal Train/Test Split** ‚úÖ
- Implement date-based splitting using insights from EDA
- Analyze temporal distribution patterns discovered in Step 3
- *Goal: Ensure model can predict future cases*

**Step 5: Class Imbalance Strategy** ‚úÖ
- Apply imbalance handling methods based on EDA findings
- Use temporal patterns to inform resampling strategies
- **Selected Default Strategy**: SMOTEENN (F1-macro: 0.272, high-risk recall: 0.143)
- **Backup Strategy**: FocalLoss (F1-macro: 0.290, preserves temporal structure)
- *Goal: Address data imbalance systematically*

### **Phase 3: Model Architecture Experiments** üîÑ *CURRENT PHASE*

**Step 6: Model Architecture Experiments** ‚≠ê *NEW APPROACH*
- **Unified vs. Individual Models**: Test single model for all years vs. separate models per year
- **Classification vs. Regression**: Compare ordinal classification vs. regression approaches
- **Ensemble Architectures**: Test bagging, boosting, and stacking combinations
- **Temporal Model Variants**: Implement time-aware model architectures
- **Default Imbalance Strategy**: SMOTEENN (from Step 5-2 Advanced results)
- **Evaluation Focus**: High-risk recall (target: 15-25%), F1-macro, temporal stability
- *Goal: Find optimal model architecture before feature engineering*

### **Phase 4: Advanced Validation & Feature Engineering**

**Step 7: Time Series Cross-Validation** ‚≠ê *ENHANCED*
- Implement proper time series CV respecting temporal dependencies
- Test different CV strategies (expanding window, rolling window)
- Validate model stability across different time periods
- **Use Best Architecture**: From Step 6 results
- **Imbalance Strategy**: SMOTEENN for training, FocalLoss for validation scenarios
- *Goal: Ensure robust temporal performance*

**Step 8: EDA-Informed Feature Engineering & Selection**
- Apply feature selection based on EDA insights (Step 3)
- Address multicollinearity (43 high correlations identified)
- Create temporal features based on business cycles
- Remove problematic features identified in EDA
- **Use Best Architecture**: From Step 6 results
- **Use Best CV Strategy**: From Step 7 results
- *Goal: Optimize feature set for selected architecture*

### **Phase 5: Model Optimization**

**Step 9: Hyperparameter Tuning with Optuna**
- Define search space based on selected architecture (Step 6)
- Use temporal CV strategy (Step 7)
- Optimize for high-risk recall (15-25% target)
- **Use Best Architecture**: From Step 6 results
- **Use Best Features**: From Step 8 results
- **Use Best CV Strategy**: From Step 7 results
- *Goal: Find optimal model configuration*

### **Phase 6: Analysis & Interpretation**

**Step 10: Feature Importance & Interpretability**
- Generate SHAP values for selected architecture
- Provide business interpretations of feature importance
- Analyze temporal feature importance patterns
- **Use Final Model**: From Step 9 results
- *Goal: Provide explainable predictions*

**Step 11: Comprehensive Visualization**
- Create business-focused visualizations
- Temporal performance analysis
- Risk prediction patterns over time
- **Use Final Model**: From Step 9 results
- *Goal: Generate actionable insights*

### **Phase 7: Validation & Documentation**

**Step 12: Model Validation & Testing**
- Test across multiple periods using temporal CV
- Validate business assumptions
- Performance degradation analysis over time
- **Use Final Model**: From Step 9 results
- *Goal: Ensure production readiness*

**Step 13: Final Documentation & Deployment Prep**
- Document limitations and recommendations
- Model deployment specifications
- Monitoring and maintenance guidelines
- **Use Final Model**: From Step 9 results
- *Goal: Deliver production-ready model*

---

## **Key Strategic Decisions Made:**

### **Imbalance Strategy Selection:**
- **Primary**: SMOTEENN (from Step 5-2 Advanced)
  - F1-macro: 0.272
  - High-risk recall: 0.143 (closest to 15-25% target)
  - Combines SMOTE with Edited Nearest Neighbors
- **Backup**: FocalLoss (from Step 5-1 Quick Wins)
  - F1-macro: 0.290
  - No data manipulation, preserves temporal structure
  - Better for temporal validation scenarios

### **Architecture-First Approach:**
- **Rationale**: Current baseline model (F1-macro: 0.242) is fundamentally limited
- **Strategy**: Fix architecture before feature engineering and hyperparameter tuning
- **Expected Outcome**: More robust foundation for subsequent optimizations

### **Temporal Focus:**
- **Priority**: Time series cross-validation and temporal model architectures
- **Business Alignment**: Credit risk prediction requires temporal stability
- **Validation**: Multiple time periods to ensure model robustness

### **Performance Targets:**
- **High-Risk Recall**: 15-25% (business critical)
- **F1-Macro**: Maximize while maintaining high-risk performance
- **Temporal Stability**: Consistent performance across time periods